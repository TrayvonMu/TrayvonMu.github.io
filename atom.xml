<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tr4yv0n&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://trayvon.me/"/>
  <updated>2019-04-19T05:26:21.034Z</updated>
  <id>http://trayvon.me/</id>
  
  <author>
    <name>Trayvon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读书目推荐</title>
    <link href="http://trayvon.me/posts/4f45247d.html"/>
    <id>http://trayvon.me/posts/4f45247d.html</id>
    <published>2019-04-19T05:05:08.000Z</published>
    <updated>2019-04-19T05:26:21.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面:"></a>写在前面:</h1><p>​    平时一直有读书的习惯，去年大概读有87本书，一直没有去做产出和推荐，但每一本书多多少少都做有读书笔记,这带来的帮助超乎了我的预料。</p><p>​    既然老师上次提出了可以推荐书目的建议，我也觉得多读书确实大有裨益。绝不限于是课内书本以及专业课本，更希望能去广泛去涉猎经济，文化，政治等类目的书籍，会让我们更宏观且全面的去了解这个世界和社会中的既成规则以及现象，深入的了解自己。</p><p>​    这个事情我会根据我的阅读进度，不定期给大家进行更新推荐，也算是对我自己的一个勉励。</p><h2 id="2019-4-1-2019-4-19"><a href="#2019-4-1-2019-4-19" class="headerlink" title="2019/4/1-2019/4/19"></a>2019/4/1-2019/4/19</h2><p>​    在此期间我看了大概有四本书吧，有的一部分书是高质量精读过去的：</p><ul><li>《<a href="https://book.douban.com/subject/3185835/" target="_blank" rel="noopener">沉思录</a>》——<a href="https://book.douban.com/author/4531963/" target="_blank" rel="noopener">[古罗马]马可·奥勒留</a> </li><li>《<a href="https://book.douban.com/subject/26297606/" target="_blank" rel="noopener">从0到1开启商业与未来的秘密</a>》——<a href="https://book.douban.com/search/彼得·蒂尔" target="_blank" rel="noopener">[美]彼得·蒂尔</a></li><li>《<a href="https://book.douban.com/subject/10799984/" target="_blank" rel="noopener">大数据 : 正在到来的数据革命，以及它如何改变政府、商业与我们的生活</a>》——<a href="https://book.douban.com/author/223589/" target="_blank" rel="noopener">[中]涂子沛</a> </li><li>《<a href="https://book.douban.com/subject/25756955/" target="_blank" rel="noopener">爱与黑暗的故事</a>》——<a href="https://book.douban.com/search/阿摩司·奥兹" target="_blank" rel="noopener">[以色列] 阿摩司·奥兹</a> </li></ul><p>推荐书目：</p><blockquote><p><strong>1  《沉思录》</strong>  </p><p><strong>2  《从0到1开启商业与未来的秘密》</strong>  </p><p><strong>3  《大数据 : 正在到来的数据革命，以及它如何改变政府、商业与我们的生活》</strong></p></blockquote><p>推荐理由：</p><p>​    简短几句话说一下推荐理由:</p><ol><li><p>《沉思录》是古罗马皇帝奥勒留写给自己的书，内容大部分是他在鞍马劳顿中写成的。作品来自奥勒留对身羁宫廷的自己和自己所处混乱世界的感受，追求一种冷静而达观的生活。这部著作是斯多葛学派的一个里程碑。作品中处处反映出很多对于人生的感悟，引人深思，去追问内心和探索本我。其虽然成书于近两千年前的古罗马时期，但其中的内容时至今日都感觉内容深刻而富有哲理，适用于当今时代社会。</p></li><li><p>Paypal创始人，Facebook第一位外部投资者彼得•蒂尔在本书中详细阐述了自己的创业历程与心得，包括如何避免竞争、如何进行垄断、如何发现新的市场。《从0到1》还将带你穿越哲学、历史、经济等多元领域，解读世界运行的脉络，分享商业与未来发展的逻辑，帮助你思考从0到1的秘密，在意想不到之处发现价值与机会。对于无论是否有创业想法的我们开阔眼界都有很大的帮助。</p></li><li><p>本书通过讲述美国半个多世纪信息开放、技术创新的历史，以别开生面的经典案例——奥巴马建设“前所未有的开放政府”的雄心、公共财政透明的曲折、《数据质量法》背后的隐情、全民医改法案的波澜、统一身份证的百年纠结、街头警察的创新传奇、美国矿难的悲情历史、商务智能的前世今生、数据开放运动的全球兴起，以及云计算、Facebook和推特等社交媒体、Web3.0与下一代互联网的未来图景等等，为您一一细解，数据创新给公民、政府、社会带来的种种挑战和变革。</p><p>美国是全书主体，但又处处反观中国当下的现实。回望中国，胡适批评“差不多先生”，黄仁宇求索“数目字管理”，作者从太平洋对面看到中美两国的差距，深知中国缺少什么、需要什么，故将十多年观察、思索所得，淘洗成这一本书。</p><p>史学大家、匹兹堡大学历史系荣誉讲座教授许倬云，有感于“老大哥”的影子，专门作序：“我们要对涂子沛先生致敬与致谢，因为他为华文世界提出一个重要的话题。”</p><p>哈佛大学商学院访问教授、全球顶尖的管理咨询大师达文波特，为中国政经两界提示智库建言：“无论是对中国政府，还是就中国的商业组织而言，《大数据》都是一本重要的书。”</p></li></ol><p>​    最后说一下为什么没有推荐第四本书，《<strong>爱与黑暗的故事</strong>》这本书讲述的是百余年间一个犹太家族的历史与民族叙事，文笔很棒，但出于文化的差异，对于以色列文化以及当时的时代背景自己缺乏一定的了解，以至于在阅读的时候有很多的不理解和提不起兴趣，缺乏知识共鸣，但作者的文笔和作品底蕴在世界上都是一流的，后期有补充犹太史和以色列文化的打算，再来拜读这本书，此前有这些基础的同学很推荐阅读这本书。</p><h2 id="2019-4-19"><a href="#2019-4-19" class="headerlink" title="2019/4/19-"></a>2019/4/19-</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面:&quot;&gt;&lt;/a&gt;写在前面:&lt;/h1&gt;&lt;p&gt;​    平时一直有读书的习惯，去年大概读有87本书，一直没有去做产出和推荐，但每一本书多多少少都做有读书笔记,这带来的
      
    
    </summary>
    
    
      <category term="书籍推荐" scheme="http://trayvon.me/tags/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>在http层通过header请求头伪造ip</title>
    <link href="http://trayvon.me/posts/56dbd93c.html"/>
    <id>http://trayvon.me/posts/56dbd93c.html</id>
    <published>2019-03-31T06:50:51.000Z</published>
    <updated>2019-03-31T06:56:44.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在正常的tcp/ip协议中是很难伪造ip的，因为在tcp/ip正式通信之前是有一个三次握手的过程，通过三次握手建立了tcp/ip连接之后再进行正常的通信，所以我之前想用python的scapy库来伪造其他ip的请求包，但是因为三次握手的时候，我的ip是伪造的，我发出去的请求包就没有办法正确的返回找到我，所以无法三次握手就没有tcp/ip正常通信，就失败了。</p><p>只要能够在tcp/ip层伪造ip，就是完全的伪造ip，没有任何办法判断，不过我这次的是在http层伪造ip，所以还是可能被发现的，而且也只有在http协议中有用，无法利用在其他地方。</p><h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>那么如何在http层伪造协议呢？我们先来了解一些http请求中的请求头header，比如说我们在chrome中登陆百度，打开chrome的开发者工具，查看network，就能够看到这次请求百度的header请求头。</p><p>Requests Headers</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding:gzip, deflate, sdch</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.8</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Cookie:BIDUPSID=XXX; PSTM=XXX; BAIDUID=XXX:FG=1; BDUSS=XXX; __cfduid=XXX; ispeed_lsm=2; BD_HOME=1; BDRCVFR[Ups602knC30]=XXX; BD_CK_SAM=1; H_PS_PSSID=XXX; BD_UPN=XXX; H_PS_645EC=XXX; locale=XXX; BDSVRTM=0; BD_LAST_QID=XXX</span><br><span class="line">Host:www.baidu.com</span><br><span class="line">Upgrade-Insecure-Requests:1</span><br><span class="line">User-Agent:Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/49.0.2623.108 Chrome/49.0.2623.108 Safari/537.36</span><br></pre></td></tr></table></figure><p>可以看到这里有很多的请求参数，在我们打开百度的时候，我们先要向百度服务器发送一个请求，而这个请求包含很多附加的关于我们自己的信息，比如说浏览器信息，cookie，接受数据格式等等，百度服务器收到我们的请求之后，返回给我们百度的页面。</p><blockquote><p>在我们发送http请求之前，就已经先进行了tcp/ip三次握手，然后再发送http请求，三次握手的过程是非常迅速的，可以用抓包工具 wireshark 查看。</p></blockquote><p>所以 header 请求头主要是一些我们发送请求时附带的我们自己的信息，同时，在看到 header 请求头的时候，也会发现在服务器返回数据的时候也会带有一个 header ，这是返回数据格式的一些信息，包括返回数据的格式，大小，时间等。</p><p>可尝试各种伪造IP的HTTP头：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For</span><br><span class="line">Client-IP</span><br><span class="line">x-remote-IP</span><br><span class="line">x-originating-IP</span><br><span class="line">x-remote-addr</span><br></pre></td></tr></table></figure><h2 id="X-Forwarded-For"><a href="#X-Forwarded-For" class="headerlink" title="X-Forwarded-For"></a>X-Forwarded-For</h2><p>接下来就是我们伪造ip的核心了，header 请求头中的 X-Forwarded-For 参数 ，这是一个用来识别http代理或负载平衡的原始ip的一个非rfc标准，就是在http请求中有时会使用代理，或者是负载均衡的时候通过了一个转发，这样的话原始ip就被隐藏起来了，这个参数就是为了标注出原始ip，格式是<code>X-Forwarded-For:client1, proxy1, proxy2 ...</code> 第一个是原始ip，后面是经过的代理。</p><p>本来这个参数是挺好的，可以判断你是否经过代理判断原始ip，不过一般使用代理的人不就是为了不被别人发现自己的真实ip么？所以这个参数也没用成为rfc的标准，默认是没有的，不强制添加。</p><p>所以这样的话，我们本来没有使用代理，就是真实ip，是不是就可以通过增加一个这样的 header 参数来伪造自己经过了代理呢？然后加入我们伪造的 ip ，让服务器以为它是真实的ip。</p><p>这样的一个思路看起来是挺好的，那么接下来我们看一下服务器是如何得到我们的ip的。</p><h2 id="服务器如何得到客户ip的"><a href="#服务器如何得到客户ip的" class="headerlink" title="服务器如何得到客户ip的"></a>服务器如何得到客户ip的</h2><p>在这里以php为例，在php里有三个值保存客户ip，分别是 <code>HTTP_CLIENT_IP</code>,<code>HTTP_X_FORWARDED_FOR</code>,<code>REMOTE_ADDR</code> 。</p><p><code>$_SERVER[&#39;HTTP_CLIENT_IP&#39;]</code> 如果有代理服务器，一般是代理服务器ip，没有则为空<code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code> 如果有代理服务器的话，一般是原始ip，没有则为空，若有多个则也显示代理服务器ip <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> 如果有代理服务器的话，则为最后一个代理的ip，没有则为连接的客户端ip</p><p>可以看到有很多的<code>一般</code>，也就是说前两个都是可以伪造的，最后的一个倒是很难伪造，不过如果真的有代理的话，最后一个也没有什么用。</p><p>所以，如何得到真实的客户端ip也是一个很头疼的问题，现在一般的做法是先取得 <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> 然后再判断有没有代理，如果有代理则获得原始ip，如果有，则将原始ip作为客户端的ip，比如说采用这种做法的有discuz。</p><p>在 discuz 的当前最新版 X3.2 中，可以在 <code>/source/class/discuz/discuz_application.php</code>中找到其获取客户端ip的函数 <code>_get_client_ip</code> ,函数如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_get_client_ip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>]) &amp;&amp; preg_match(<span class="string">'/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/'</span>, $_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>])) &#123;</span><br><span class="line">        $ip = $_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>];</span><br><span class="line">    &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]) <span class="keyword">AND</span> preg_match_all(<span class="string">'#\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;#s'</span>, $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>], $matches)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($matches[<span class="number">0</span>] <span class="keyword">AS</span> $xip) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'#^(10|172\.16|192\.168)\.#'</span>, $xip)) &#123;</span><br><span class="line">                $ip = $xip;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也有用这样的函数来取得客户端的ip，不过想法都是一样的，只是实现不一样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetIP</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">"HTTP_CLIENT_IP"</span>]))</span><br><span class="line">        $cip = $_SERVER[<span class="string">"HTTP_CLIENT_IP"</span>]</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>]))</span><br><span class="line">        $cip = $_SERVER[<span class="string">"HTTP_X_FORWARDED_FOR"</span>]</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">"REMOTE_ADDR"</span>]))</span><br><span class="line">        $cip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        $cip = <span class="string">"无法获取！"</span>;</span><br><span class="line">    <span class="keyword">return</span> $cip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>测试了一下使用 discuz 的情况，确实是可以伪造ip的，特别是在使用discuz插件投票的时候，可以恶意刷票，不过为了防止这种情况的发生，在服务器端可以通过设置服务器来过滤，这里就不再展开详叙了。</p><p><strong>转载出处：</strong><a href="https://windard.com/project/2016/05/08/Forge-IP-Address" target="_blank" rel="noopener">通过修改http请求的header请求头来伪造ip By Windard</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在正常的tcp/ip协议中是很难伪造ip的，因为在tcp/ip正式通信之前是有一个三次握手的过程，通过三次握手建立了tcp/ip连接之后再进
      
    
    </summary>
    
    
      <category term="web" scheme="http://trayvon.me/tags/web/"/>
    
      <category term="http" scheme="http://trayvon.me/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>YFCTFwriteup</title>
    <link href="http://trayvon.me/posts/2308731.html"/>
    <id>http://trayvon.me/posts/2308731.html</id>
    <published>2018-12-08T08:40:12.000Z</published>
    <updated>2018-12-09T10:28:33.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YFCTF-部分writeup"><a href="#YFCTF-部分writeup" class="headerlink" title="YFCTF 部分writeup"></a>YFCTF 部分writeup</h1><blockquote><p>但行好事，莫问前程</p></blockquote><p>目标依然存在，把它模糊化成心中一盏明灯，指引前行的北斗星</p><p>第一次写正式写writeup，写出已经做出答案题目的writeup，希望自己但凡做一件事都能坚持下去</p><h2 id="0x01隐写"><a href="#0x01隐写" class="headerlink" title="0x01隐写"></a>0x01隐写</h2><p>算是常规套路，折腾了会儿图片发现没什么东西，然后用audacity打开音频文件。适当放大后可以看出来是摩斯密码，使用<a href="http://ctf.ssleye.com/解密工具可以直接解密出来。" target="_blank" rel="noopener">http://ctf.ssleye.com/解密工具可以直接解密出来。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;jygg&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02兵器1024所"><a href="#0x02兵器1024所" class="headerlink" title="0x02兵器1024所"></a>0x02兵器1024所</h2><p>这是一道流量分析题，先用wireshark打开附件，得到报文：</p><p><img src="D:\Blog\source\image\2018-12-8\1.png" alt=""></p><p>没有思路的时候从开始逐个点开查看内容，由于主办方的flag为flag{…}的格式，在查看中发现第1，3，5，7的包中恰好有这几个keywords，且全部是request发出的包，所以注重观察request发出的包。</p><p>经过对应后，发现将报文中request发出的包中的<code>ttl</code>值当做十进制处理，对应ASCII表后即为所求，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fkdsjaklvklfnkvhcihvekjndjkschsja&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03不安全的上传"><a href="#0x03不安全的上传" class="headerlink" title="0x03不安全的上传"></a>0x03不安全的上传</h2><p>这道题本来分析报文分析了挺久都没有头绪，以为找的了flag试了下都是错的，在伙伴的提醒下，看了下题目：不安全的上传，结合报文内容找到了与之相关的<code>ftp</code>协议，在窗口顶端过滤栏输入并点击Apply，着重分析<code>ftp</code>协议的内容：</p><p><img src="D:\Blog\source\image\2018-12-8\2.png" alt=""></p><p>通过对内容观察可知，使用者使用<code>ftp</code>协议进行了两次尝试登录，第一次登录失败，第二次登陆成功，所以flag是第二次登陆信息的可能大一些，进行尝试提交后通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;wfjhds$ghrewjgnds%chsjgre&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04杂项加密"><a href="#0x04杂项加密" class="headerlink" title="0x04杂项加密"></a>0x04杂项加密</h2><p>这道题做的时候在尝试理解加密方式，也没查到是哪种加密方式(还是见得太少了)，最后在伙伴的提醒下知道是古典密码的仿射密码：</p><p><strong>原理</strong> <a href="https://ctf-wiki.github.io/ctf-wiki/crypto/classical/monoalphabetic/#_15" target="_blank" rel="noopener">wiki</a></p><p>仿射密码的加密函数是<br>$$<br>E(x)=(ax+b)(modm)E(x)=(ax+b)(modm)<br>$$<br>其中</p><ul><li>xx 表示明文按照某种编码得到的数字</li><li>aa 和 mm 互质</li><li>mm 是编码系统中字母的数目。</li></ul><p>根基观察发现，虽然对于 flag 中的每个字母都加密了 n 次，如果我们仔细分析的话，我们可以发现<br>$$<br>c_1=a_1c+b_1<br>$$</p><p>$$<br>c_2=a_2c_1+b_2<br>   =a_1a_2c+a_2b_1+b_2<br>   =kc+d<br>$$</p><p>根据第二行的推导，我们可以得到其实 cncn 也是这样的形式，可以看成 cn=xc+ycn=xc+y ，并且，我们可以知道的是，key 是始终不变化的，所以说，其实这个就是仿射密码。</p><p>根据原理利用明文进行攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"></span><br><span class="line">key = <span class="string">'****CENSORED****************'</span></span><br><span class="line">flag = <span class="string">'TWCTF&#123;*******CENSORED********&#125;'</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'encrypted'</span>, <span class="string">'r'</span>)</span><br><span class="line">data = f.read().strip(<span class="string">'\n'</span>)</span><br><span class="line">encrypted = [int(data[i:i + <span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">2</span>)]</span><br><span class="line">plaindelta = ord(flag[<span class="number">1</span>]) - ord(flag[<span class="number">0</span>])</span><br><span class="line">cipherdalte = encrypted[<span class="number">1</span>] - encrypted[<span class="number">0</span>]</span><br><span class="line">a = gmpy.invert(plaindelta, <span class="number">251</span>) * cipherdalte % <span class="number">251</span></span><br><span class="line">b = (encrypted[<span class="number">0</span>] - a * ord(flag[<span class="number">0</span>])) % <span class="number">251</span></span><br><span class="line">a_inv = gmpy.invert(a, <span class="number">251</span>)</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> encrypted:</span><br><span class="line">    result += chr((c - b) * a_inv % <span class="number">251</span>)</span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><h2 id="0x05后记"><a href="#0x05后记" class="headerlink" title="0x05后记"></a>0x05后记</h2><p>这是自己第二次参加CTF比赛，每一次的比赛中都能真真切切的感受到自己的菜，还是见的太少。自己做出来的题不多，赛后做出的题目由于不知道对错，就没有写出来，题目平台关的这么快有些难受。但好在不断的在朝前走，每一次都能有所收获。下来需要合理安排自己的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;YFCTF-部分writeup&quot;&gt;&lt;a href=&quot;#YFCTF-部分writeup&quot; class=&quot;headerlink&quot; title=&quot;YFCTF 部分writeup&quot;&gt;&lt;/a&gt;YFCTF 部分writeup&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;但行好事，
      
    
    </summary>
    
    
      <category term="ctf" scheme="http://trayvon.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Weblogic反序列化漏洞初探</title>
    <link href="http://trayvon.me/posts/669570ad.html"/>
    <id>http://trayvon.me/posts/669570ad.html</id>
    <published>2018-10-31T12:04:55.000Z</published>
    <updated>2018-11-01T11:52:42.628Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Weblogic由WLS Security子组件对外部提供Webservice服务，其中使用了XMLDecoder来解析用户传入的数据，在解析过程中间出现反序列化漏洞，导致可以进行任意命令的执行，由此导致了CVE-2017-3506 &amp; CVE-2017-10271的产生。</strong></p><hr><h1 id="0x00-环境准备"><a href="#0x00-环境准备" class="headerlink" title="0x00 环境准备"></a>0x00 环境准备</h1><ul><li><strong>Windows 10 x64</strong></li><li><strong>Docker CE for Windows</strong></li><li><strong>IntelliJ IDEA</strong></li></ul><p>在Github上的<a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">Vulhub</a>是一个面向大众的开源漏洞靶场，因此可以利用现成的<a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">Vulhub</a>中的<code>docker-compose.yml</code>进行环境搭建，具体操作步骤可以参照<code>Vulhub</code>相应的描述文件，内容十分详尽，感谢Vulhub大佬们的贡献，为萌新剩下了不少造轮子的时间。</p><p>由于需要在宿主机进行本地调试，除了本来打开的<code>7001</code>端口之外，还需要开放一个远端调试端口，所以应该改动一下<code>docker-compose.yml</code>开放8453端口，修改完的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2&apos;</span><br><span class="line">services:</span><br><span class="line"> weblogic:</span><br><span class="line">   image: vulhub/weblogic</span><br><span class="line">   ports:</span><br><span class="line">    - &quot;7001:7001&quot;</span><br><span class="line">    - &quot;8453:8453&quot;</span><br></pre></td></tr></table></figure><p>启动镜像中间我个人碰到了一些奇怪的问题，导致端口一直打不开，最后发现将配置文件修改如下后，镜像启动正常,很迷。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr"> weblogic:</span></span><br><span class="line"><span class="attr">   image:</span> <span class="string">vulhub/weblogic</span></span><br><span class="line"><span class="attr">   ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">7001</span><span class="string">:7001</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">8453</span><span class="string">:8453</span></span><br></pre></td></tr></table></figure><p>最后在Docker中<code>docker-compose up -d</code>完成搭建。</p><p>Docker搭建完成后，使用命令<code>docker exec -it weblogic bash</code>进入docker容器，修改<code>/root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh</code>文件，找到以下代码段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"$&#123;debugFlag&#125;"</span> = <span class="string">"true"</span> ] ; then</span><br><span class="line">        JAVA_DEBUG=<span class="string">"-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=$&#123;DEBUG_PORT&#125;,server=y,suspend=n -Djava.compiler=NONE"</span></span><br><span class="line">        export JAVA_DEBUG</span><br><span class="line">        JAVA_OPTIONS=<span class="string">"$&#123;JAVA_OPTIONS&#125; $&#123;enableHotswapFlag&#125; -ea -da:com.bea... -da:javelin... -da:weblogic... -ea:com.bea.wli... -ea:com.bea.broker... -ea:com.bea.sbconsole..."</span></span><br><span class="line">        export JAVA_OPTIONS</span><br></pre></td></tr></table></figure><p>在其前面添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debugFlag=<span class="string">"true"</span></span><br><span class="line">expport debugFlag</span><br></pre></td></tr></table></figure><p>运行<code>exit</code>退出容器，重启容器。使用命令<code>docker ps</code>查看容器运行情况。</p><p>由于要在宿主机远程调试Weblogic，而weblogic是没有源码的，所以需要把相关依赖也一并拷出来。</p><p><code>docker cp weblogic:/root/Oracle/Middleware/wlserver_10.3 ./wlserver_10.3</code></p><p>但会报出如下错误：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open D:\Docker\vulhub\weblogic\CVE-<span class="number">2017</span>-<span class="number">10271</span>\wlserver_10.<span class="number">3</span>\samples\server\medrec\modules\physician\assembly\target\exploded\physician\physician-jaxrpc-facade-client-broker\WEB-INF\classes\com\bea\physician\facade\broker\jaxrpc\JaxRpcRecordCreationFacadeClientBroker.class: The system cannot find the path specified.</span><br></pre></td></tr></table></figure><p>查找结果如下：</p><p><img src="\image\2018-10-31\2018-10-31-1.PNG" alt=""></p><p>由于微软对于命令行下的路径长度限制，拷贝行为会报错并结束。</p><p>可以使用linux打包命令：<code>zip -r zipname.zip /targetdir</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r wlserver_10.3.zip /wlserver_10.3</span><br></pre></td></tr></table></figure><p>这部分jar包不全，还要将Docker中，<code>/root/Oracle/Middleware/modules</code>给拷出来，然后全部扔进刚才复制到宿主机的<code>wlserver_10.3/server/lib</code>目录下。</p><hr><h1 id="0x01-远程调试"><a href="#0x01-远程调试" class="headerlink" title="0x01 远程调试"></a>0x01 远程调试</h1><p>使用idea打开wlserver_10.3，将server/lib文件夹添加到library。</p><p><img src="\image\2018-10-31\2018-10-31-2.PNG" alt=""></p><p>添加完后，就会发现里面的.jar和.war的包都可以点开了。并且可以搜索里面的一些类和字符串了。然后设置debug，添加一个Remote配置：</p><p><img src="\image\2018-10-31\2018-10-31-3.PNG" alt=""></p><p>端口设置为8453，并且设置module classpath：</p><p><img src="\image\2018-10-31\2018-10-31-4.PNG" alt=""></p><p>点击debug，出现如下字样，说明已经配置ok。</p><p>在wlserver_10.3/server/lib/weblogic.jar!/weblogic/wsee/jaxws/WLSServletAdapter.class中的handle方法下断点，看看能否击中断点。</p><p><img src="\image\2018-10-31\2018-10-31-5.PNG" alt=""></p><hr><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><p>测试使用的POC如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:7001</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 769</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">java</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"3"</span>&gt;</span> </span><br><span class="line">            。。。。</span><br><span class="line">          <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">void</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">java</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于poc中uri中<code>/wls-wsat/CoordinatorPortType</code> 可以换成CoordinatorPortType11等wsat 这个webservice服务中存在的其他uri。</p><p>由于在docker中，就只是利用权限进行了文件写入。</p><p>执行的效果图如下：</p><p><img src="\image\2018-10-31\2018-10-31-6.PNG" alt=""></p><p><img src="\image\2018-10-31\2018-10-31-7.PNG" alt=""></p><hr><h1 id="0x03-动态分析"><a href="#0x03-动态分析" class="headerlink" title="0x03 动态分析"></a>0x03 动态分析</h1><p>根据poc内容可知，此次漏洞出现在<code>wls-wsat.war</code>中，构造SOAP（XML）格式的请求，在解析的过程中导致XMLDecoder反序列化漏洞</p><p>在IDEA中搜索<code>wls-wsat.war</code>。打开后点击<code>web.xml</code>查看有哪些接口</p><p><img src="\image\2018-10-31\2018-10-31-8.PNG" alt=""></p><p>第一个就是所需要的接口。由于<code>WebLogic servlet</code>的分发机制复杂，先放在一边。</p><p>根据网上大佬们已有分析，我只是跟一下流程：</p><p>从processRequest开始被xml逻辑处理，输入中的readUTF中被反序列化。以下是函数调用栈：</p><p><img src="\image\2018-10-31\2018-10-31-9.PNG" alt=""></p><p><img src="\image\2018-10-31\2018-10-31-18.PNG" alt=""></p><h2 id="具体分析流程如下："><a href="#具体分析流程如下：" class="headerlink" title="具体分析流程如下："></a>具体分析流程如下：</h2><h3 id="weblogic-wsee-jaxws-WLSServletAdapter-class"><a href="#weblogic-wsee-jaxws-WLSServletAdapter-class" class="headerlink" title="weblogic.wsee.jaxws.WLSServletAdapter.class"></a>weblogic.wsee.jaxws.WLSServletAdapter.class</h3><p><img src="\image\2018-10-31\2018-10-31-11.PNG" alt=""></p><p>请求先会进入handel方法，handel方法又会执行super.handle(var1, var2, var3);方法，这个方法对servlet的容器和request和response进行了封装。</p><p>继续跟进</p><p><img src="\image\2018-10-31\2018-10-31-12.PNG" alt=""></p><p>先会对var1的内容判断是否为空，不为空的话，会取出xml中的header，也就是我们poc中的:</p><p><img src="\image\2018-10-31\2018-10-31-13.PNG" alt=""></p><h3 id="weblogic-wsee-jaxws-workcontext-WorkContextTube"><a href="#weblogic-wsee-jaxws-workcontext-WorkContextTube" class="headerlink" title="weblogic.wsee.jaxws.workcontext.WorkContextTube"></a>weblogic.wsee.jaxws.workcontext.WorkContextTube</h3><p><img src="\image\2018-10-31\2018-10-31-14.PNG" alt=""></p><p>继续跟进receive()</p><h3 id="weblogic-workarea-WorkContextMapImpl"><a href="#weblogic-workarea-WorkContextMapImpl" class="headerlink" title="weblogic.workarea.WorkContextMapImpl"></a>weblogic.workarea.WorkContextMapImpl</h3><p><img src="\image\2018-10-31\2018-10-31-15.PNG" alt=""></p><p>将数据传到下一个receiveRequest。</p><h3 id="weblogic-workarea-WorkContextLocalMap"><a href="#weblogic-workarea-WorkContextLocalMap" class="headerlink" title="weblogic.workarea.WorkContextLocalMap"></a>weblogic.workarea.WorkContextLocalMap</h3><p><img src="\image\2018-10-31\2018-10-31-16.PNG" alt=""></p><p><code>WorkContextEntryImpl.readEntry(var1)</code>对传进来的数据进行处理，继续跟进</p><h3 id="weblogic-workarea-spi-WorkContextEntryImpl"><a href="#weblogic-workarea-spi-WorkContextEntryImpl" class="headerlink" title="weblogic.workarea.spi.WorkContextEntryImpl"></a>weblogic.workarea.spi.WorkContextEntryImpl</h3><p><img src="\image\2018-10-31\2018-10-31-17.PNG" alt=""></p><p> 继续跟进WorkContextEntryImpl中的readEntry方法中，对var0进行了readUTF()方法。</p><h3 id="weblogic-wsee-workarea-WorkContextXmlInputAdapter-class"><a href="#weblogic-wsee-workarea-WorkContextXmlInputAdapter-class" class="headerlink" title="weblogic.wsee.workarea.WorkContextXmlInputAdapter.class"></a>weblogic.wsee.workarea.WorkContextXmlInputAdapter.class</h3><p><img src="\image\2018-10-31\2018-10-31-18.PNG" alt=""></p><p>发现最终执行了readObject方法，对XMLDecoder对象进行了反序列化，导致了远程命令执行。</p><hr><h1 id="0x04-漏洞原因"><a href="#0x04-漏洞原因" class="headerlink" title="0x04 漏洞原因"></a>0x04 漏洞原因</h1><p>Weblogic没有对XML的数据进行任何的过滤，导致可以构造XML数据，通过反序列化任意对象，进行任意命令的执行，这就导致了CVE-2017-3506漏洞的产生。</p><hr><h1 id="0x05-Exploit"><a href="#0x05-Exploit" class="headerlink" title="0x05 Exploit"></a>0x05 Exploit</h1><p>暂无</p><hr><h1 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h1><p>参考网上现有复现资料的分析做出了分析报告，在第一次做漏洞复现的时候也踩了不少坑遇到了一些困难，感谢周围师傅们的帮忙和鼓励。第一次写复现博客，感觉自己在动手写分析是发现了一些没注意问题或者本来毫无概念性的东西，对于复现过程和漏洞都有较之前有了初步的了解，同时也深感自己知识能力有所欠缺，继续努力。</p><hr><h1 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h1><p><a href="https://paper.seebug.org/487/" target="_blank" rel="noopener">Weblogic XMLDecoder RCE分析</a></p><p><a href="https://www.anquanke.com/post/id/102768" target="_blank" rel="noopener">CVE-2017-10271 Weblogic XMLDecoder反序化分析</a></p><p><a href="https://zhuanlan.zhihu.com/p/32301092" target="_blank" rel="noopener">CVE-2017-3506 &amp; 10271：Weblogic 远程代码执行漏洞分析及复现笔记</a></p><p><a href="http://xxlegend.com/2017/12/22/Weblogic%20CVE-2017-10271%20XMLDecoder%20RCE%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">Weblogic XMLDecoder RCE分析</a></p><p><a href="http://whip1ash.cn/2018/10/21/weblogic-deserialization" target="_blank" rel="noopener">从0开始学习WebLogic(Java)反序列化 (1)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Weblogic由WLS Security子组件对外部提供Webservice服务，其中使用了XMLDecoder来解析用户传入的数据，在解析过程中间出现反序列化漏洞，导致可以进行任意命令的执行，由此导致了CVE-2017-3506 &amp;amp; CVE-20
      
    
    </summary>
    
    
      <category term="Weblogic" scheme="http://trayvon.me/tags/Weblogic/"/>
    
      <category term="CVE" scheme="http://trayvon.me/tags/CVE/"/>
    
      <category term="漏洞复现" scheme="http://trayvon.me/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Windows下生成https证书</title>
    <link href="http://trayvon.me/posts/eb1c71d3.html"/>
    <id>http://trayvon.me/posts/eb1c71d3.html</id>
    <published>2018-10-30T03:04:56.000Z</published>
    <updated>2018-10-30T04:02:08.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>基于windows平台64位系统</p><ol><li><p>下载<code>openssl</code></p><p>安装<code>openssl</code>有两种方式，第一种直接下载安装包，装上就可运行；第二种可以自己下载源码</p><p>此处的重点不是如何安装<code>openssl</code>,故选用最简单的方法进行使用：</p><p>​    Windows下的<code>openssl</code>的安装包下载地址为：<a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">openssl</a> </p></li></ol><h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><p>安装好<code>openssl</code>之后进入到<code>openssl</code>的安装目录下的bin目录</p><p>默认路径为<code>C:\Program Files\OpenSSL-Win64</code></p><h2 id="运行一下命令，生成密钥key"><a href="#运行一下命令，生成密钥key" class="headerlink" title="运行一下命令，生成密钥key"></a>运行一下命令，生成密钥key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out D:\workdir\server.key 2048</span><br></pre></td></tr></table></figure><p><code>D:\Docker\docker-nginx-php-mysql\server.key</code>:这个是生成的文件路径</p><p>这个命令执行的时候，会提示输入密码，任意输入即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Generating RSA private key, 2048 bit long modulus (2 primes)</span><br><span class="line">....................................................................................................................................................+++++</span><br><span class="line">......+++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line">Enter pass phrase for D:\workdir\server.key:</span><br><span class="line">Verifying - Enter pass phrase for D:\workdir\server.key:</span><br></pre></td></tr></table></figure><p>生成完毕后，可以使用以下命令移除密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in D:\workdir\server.key -out D:\workdir\server.key</span><br></pre></td></tr></table></figure><h2 id="创建证书的申请文件"><a href="#创建证书的申请文件" class="headerlink" title="创建证书的申请文件"></a>创建证书的申请文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key D:\workdir\server.key -out D:\workdir\server.csr</span><br></pre></td></tr></table></figure><p><strong>如果在执行上面的命令的时候出现以下错误：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to load config info from /usr/local/ssl/openssl.cnf</span><br></pre></td></tr></table></figure><ul><li><p>此错误因为<code>openssl</code>找不到对应的配置文件，如果电脑已经安装过<code>git</code>的话，在<code>git</code>中已经存在这个文件夹，w文件默认路径为<code>C:\Program Files\Git\mingw64\ssl\openssl.cnf</code>我们可以借用<code>git</code>下面这个文件进行命令操作，可将命令修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key D:\workdir\server.key -out D:\workdir\server.csr -config "C:\Program Files\Git\mingw64\ssl\openssl.cnf"</span><br></pre></td></tr></table></figure></li></ul><p>执行完上述命令后，根据提示一步步输入信息即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:cn</span><br><span class="line">State or Province Name (full name) [Some-State]:*****</span><br><span class="line">Locality Name (eg, city) []:****</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:person</span><br><span class="line">Organizational Unit Name (eg, section) []:person</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:person</span><br><span class="line">Email Address []:*****8@example.com</span><br><span class="line"></span><br><span class="line">Please enter the following 'extra' attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br></pre></td></tr></table></figure><ul><li>后面的<code>extra</code>信息选填，可以直接回车略过。</li></ul><h2 id="签署服务器证书文件"><a href="#签署服务器证书文件" class="headerlink" title="签署服务器证书文件"></a>签署服务器证书文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key D:\workdir\server.key -out D:\workdir\ca.crt -days 3650 -config <span class="string">"C:\Program Files\Git\mingw64\ssl\openssl.cnf"</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果在之前出现过<code>Unable to load config info from /usr/local/ssl/openssl.cnf</code>，即找不到<code>openssl</code>的对应配置文件，需要在后面加上上述的<code>-config</code>参数；如果之前没有报错，可忽略掉<code>-config</code>参数。</p><h2 id="使用上述文件创建自己的证书"><a href="#使用上述文件创建自己的证书" class="headerlink" title="使用上述文件创建自己的证书"></a>使用上述文件创建自己的证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -in D:\workdir\server.csr -CA D:\workdir\ca.crt -CAkey server.key -CAcreateserial -out D:\workdir\server.crt</span><br></pre></td></tr></table></figure><p><strong>至此，自签名的<code>.crt</code>生成完毕</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;基于windows平台64位系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载&lt;code&gt;openssl&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://trayvon.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://trayvon.me/posts/b8f4bd70.html"/>
    <id>http://trayvon.me/posts/b8f4bd70.html</id>
    <published>2018-10-26T09:48:24.000Z</published>
    <updated>2018-10-28T02:37:34.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我使用的计算机为<code>Windows</code>平台，并以此为例，请确保在计算机上已经安装过<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>，然后在正确的路径执行以下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br><span class="line">hexo init blog </span><br><span class="line">cd blog </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>根据需要编辑文件<code>_config.yml</code>并应用自己的配置：</p><h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Tr4yv0n<span class="string">'s Blog</span></span><br><span class="line"><span class="string">subtitle:</span></span><br><span class="line"><span class="string">description:</span></span><br><span class="line"><span class="string">keywords: Programming,WebSec...etc</span></span><br><span class="line"><span class="string">author: Trayvon</span></span><br><span class="line"><span class="string">language:zh-Hans</span></span><br><span class="line"><span class="string">timezone: Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h2 id="URL配置"><a href="#URL配置" class="headerlink" title="URL配置"></a>URL配置</h2><ol><li><p>首先，安装依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url: http:<span class="comment">//yoursite.com </span></span><br><span class="line">root: <span class="regexp">/ </span></span><br><span class="line"><span class="regexp">permalink: post/</span>:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # support crc16(default) and crc32</span><br><span class="line">  rep: hex    # support dec(default) and hex</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h2><ol><li><p>设置远程存储库。例如，创建您的<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub页面</a>。</p></li><li><p>在本地计算机上安装依赖项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>配置网站<code>_config.yml</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li><p>注意：需要将配置项中的<code>repo</code>更改为自己的仓库路径，且要注意每个配置选项的冒号后面要有一个空格，必要严格参照此规定格式，否则配置不会生效！！！</p></li><li><p>请注意，要将博客部署到远程服务器，您必须具有用于编写访问权限的正确凭据。请参阅<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">使用SSH连接到GitHub</a>。</p><p>如果还想将博客部署到自己的Git服务器中，请参阅服务器上的<a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server" target="_blank" rel="noopener">Git - 设置服务器</a>。</p></li></ul><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2></li><li><p>首先，安装主题相关依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/theme-next/hexo-theme-next themes / next</span></span><br></pre></td></tr></table></figure></li><li><p>配置：</p><p>在网站配置文件<code>_config.yml</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li></ol><h1 id="NEXT主题相关配置"><a href="#NEXT主题相关配置" class="headerlink" title="NEXT主题相关配置"></a>NEXT主题相关配置</h1><p>根据需要编辑文件<code>themes/next/_config.yml</code>并应用自己的配置：</p><h2 id="图标配置"><a href="#图标配置" class="headerlink" title="图标配置"></a>图标配置</h2><ol><li><p>访问<a href="https://realfavicongenerator.net/" target="_blank" rel="noopener">https://realfavicongenerator.net</a>并获取<code>favicon</code>。</p></li><li><p>配置主题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">favicon：</span><br><span class="line">  small: <span class="regexp">/favicon-16x16-next.png </span></span><br><span class="line"><span class="regexp">  medium: /</span>favicon<span class="number">-32</span>x32-next.png</span><br></pre></td></tr></table></figure><h2 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h2></li><li><p>生成菜单页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"tags"</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"categories"</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></li><li><p>分别编辑他们的<a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">菜单</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: <span class="string">"tags"</span></span><br><span class="line">type: <span class="string">"categories"</span></span><br><span class="line">type: <span class="string">"about"</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: <span class="regexp">/ || home</span></span><br><span class="line"><span class="regexp">  about: /</span>about/ || user</span><br><span class="line">  categories: <span class="regexp">/categories/</span> || th</span><br><span class="line">  archives: <span class="regexp">/archives/</span> || archive</span><br></pre></td></tr></table></figure></li><li><p><code>about</code>页面可通过添加一些内容来自定义页面。</p></li></ol><h2 id="方案配置"><a href="#方案配置" class="headerlink" title="方案配置"></a>方案配置</h2><p>将其从Muse（默认方案）更改为Mist。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme: Mist</span><br></pre></td></tr></table></figure><h2 id="社交链接配置"><a href="#社交链接配置" class="headerlink" title="社交链接配置"></a>社交链接配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:<span class="comment">//github.com/PeichengLiu || github</span></span><br><span class="line">  E-Mail: mailto:user@example.com || envelope</span><br></pre></td></tr></table></figure><h2 id="边栏头像"><a href="#边栏头像" class="headerlink" title="边栏头像"></a>边栏头像</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  url: <span class="regexp">/avatar.jpg</span></span><br></pre></td></tr></table></figure><h2 id="CC许可声明"><a href="#CC许可声明" class="headerlink" title="CC许可声明"></a>CC许可声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reative_commons: by-nc-sa</span><br></pre></td></tr></table></figure><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><ol><li>首先，安装依赖项：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ol><li>配置：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="一些小操作"><a href="#一些小操作" class="headerlink" title="一些小操作"></a>一些小操作</h1><h2 id="内容压缩"><a href="#内容压缩" class="headerlink" title="内容压缩"></a>内容压缩</h2><p><strong>Gulp简介</strong></p><p><strong><code>gulp.js</code></strong> 是一种基于流的，代码优于配置的新一代构建工具。<br>具体前往<a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">官网</a>查看<br>反正是一个基于 node 的用于自动化的工具，和 Grunt 比较类似，不过亮点是 <strong>流</strong> 和 <strong>写代码</strong> ，所以会比 Grunt 快一点。</p><ol><li><h3 id="首先，安装依赖项："><a href="#首先，安装依赖项：" class="headerlink" title="首先，安装依赖项："></a>首先，安装依赖项：</h3></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp gulp-csso gulp-htmlmin gulp-htmlclean  babel-core babel-preset-es2015 gulp-babel gulp-uglify --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li><h3 id="创建一个gulpfile-js在博客根目录中命名的文件，然后将以下代码粘贴到其中："><a href="#创建一个gulpfile-js在博客根目录中命名的文件，然后将以下代码粘贴到其中：" class="headerlink" title="创建一个gulpfile.js在博客根目录中命名的文件，然后将以下代码粘贴到其中："></a>创建一个<code>gulpfile.js</code>在博客根目录中命名的文件，然后将以下代码粘贴到其中：</h3></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> csso = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(csso())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])</span><br><span class="line">        .pipe(babel(&#123; <span class="attr">presets</span>: [<span class="string">'es2015'</span>] &#125;))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-html'</span>]);</span><br></pre></td></tr></table></figure><ol start="3"><li><h3 id="在-hexo-g-之后在-cmd-里敲入-gulp-回车就可以啦"><a href="#在-hexo-g-之后在-cmd-里敲入-gulp-回车就可以啦" class="headerlink" title="在 hexo g 之后在 cmd 里敲入 gulp 回车就可以啦"></a>在 hexo g 之后在 cmd 里敲入 gulp 回车就可以啦</h3><p>推荐姿势：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li><li><h3 id="更为推（偷）荐（懒）的方式："><a href="#更为推（偷）荐（懒）的方式：" class="headerlink" title="更为推（偷）荐（懒）的方式："></a>更为推（偷）荐（懒）的方式：</h3><p>编辑名为<code>package.json</code>这样的文件</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ... pretend to be comments here, there is no syntax for comments in JSON</span></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"publish"</span>: <span class="string">"hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><h3 id="从现在开始，就可以使用以下命令部署博客"><a href="#从现在开始，就可以使用以下命令部署博客" class="headerlink" title="从现在开始，就可以使用以下命令部署博客"></a>从现在开始，就可以使用以下命令部署博客</h3></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run publish</span><br></pre></td></tr></table></figure><p>有关参考<a href="https://hexo.io/docs/commands.html" target="_blank" rel="noopener">Hexo命令</a>，<a href="https://docs.npmjs.com/cli/run-script" target="_blank" rel="noopener">npm-run-script</a>，<a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp</a></p><p><strong>Tips:配置的时候遇到了个坑，多方查找后才解决了问题：</strong></p><p>在配置<code>webpack.config.js</code>打包的时候,出现<code>Error: Cannot find module &#39;@babel/core&#39;</code>错误。</p><p>最初以为是<code>babel-core</code>没有安装上。重装了好几遍<code>babel-core</code>还是不行</p><p>官方默认<code>babel-loader | babel</code> 对应的版本需要一致: 即<code>babel-loader</code>需要搭配最新版本babel*</p><p>两种解决方案:</p><ol><li>回退低版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D babel-loader@7 babel-core babel-preset-env</span><br></pre></td></tr></table></figure><ol><li>更新到最高版本:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env webpack</span><br></pre></td></tr></table></figure><p>参考资料：<a href="https://www.cnblogs.com/soyxiaobi/p/9554565.html" target="_blank" rel="noopener">https://www.cnblogs.com/soyxiaobi/p/9554565.html</a></p><h2 id="音乐播放器集成"><a href="#音乐播放器集成" class="headerlink" title="音乐播放器集成"></a>音乐播放器集成</h2><ol><li><h4 id="在文件中附加以下代码themes-next-layout-partials-footer-swig："><a href="#在文件中附加以下代码themes-next-layout-partials-footer-swig：" class="headerlink" title="在文件中附加以下代码themes/next/layout/_partials/footer.swig："></a>在文件中附加以下代码<code>themes/next/layout/_partials/footer.swig</code>：</h4></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><h4 id="按以下代码添加音乐到您的帖子："><a href="#按以下代码添加音乐到您的帖子：" class="headerlink" title="按以下代码添加音乐到您的帖子："></a>按以下代码添加音乐到您的帖子：</h4></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aplayer"</span> <span class="attr">data-id</span>=<span class="string">"857619"</span> <span class="attr">data-server</span>=<span class="string">"netease"</span> <span class="attr">data-type</span>=<span class="string">"song"</span> <span class="attr">data-mode</span>=<span class="string">"single"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多配置选项，请查看<a href="https://github.com/metowolf/MetingJS" target="_blank" rel="noopener">MetingJS</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;我使用的计算机为&lt;code&gt;Windows&lt;/code&gt;平台，并以此为例，请确保在计算机上已经安装过&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://trayvon.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://trayvon.me/posts/4a17b156.html"/>
    <id>http://trayvon.me/posts/4a17b156.html</id>
    <published>2018-10-24T12:18:12.779Z</published>
    <updated>2018-10-27T11:25:48.391Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
